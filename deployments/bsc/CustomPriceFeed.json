{
  "address": "0xa5512330349F3ec115Ead4b81AaFb3C00c02cD69",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILandCore",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_v3Pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LandCore",
      "outputs": [
        {
          "internalType": "contract ILandCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Q96",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TWAP_PERIOD",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "fetchPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd61a97b4a8cee3034f86b7972a65cc4ba7442930654647e014d64b27044325fa",
  "receipt": {
    "to": null,
    "from": "0x7B62c4Cd23D8F6bBDDD2Ec81160C5D609D47abeb",
    "contractAddress": "0xa5512330349F3ec115Ead4b81AaFb3C00c02cD69",
    "transactionIndex": 312,
    "gasUsed": "810361",
    "logsBloom": "0x
    "blockHash": "0x89e73c1ba2e731bfa791836e0a8f67559d0791fa3bca3746ee5969e8ae7e36ee",
    "transactionHash": "0xd61a97b4a8cee3034f86b7972a65cc4ba7442930654647e014d64b27044325fa",
    "logs": [],
    "blockNumber": 51258581,
    "cumulativeGasUsed": "58199878",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaf80Dfd9c92Be754b6889A31D4923fadc5c7d531",
    "0x63eC886286f30AD392749b9e8f24f67F5b8Ac394",
    "0x2bc022c976f0b884d79897d073063fecc7df2a7a"
  ],
  "numDeployments": 1,
  "solcInputHash": "332186302e406892e166b07fe19be5ba",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILandCore\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_v3Pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LandCore\",\"outputs\":[{\"internalType\":\"contract ILandCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Q96\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWAP_PERIOD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"fetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pricefeeds/CustomPriceFeed.sol\":\"CustomPriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IUniswapV3Pool {\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n        \\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n}\",\"keccak256\":\"0xd9c0c2885281934321b9f09303b2f63bee2595cc2d45545847e13d6bcbe1455e\",\"license\":\"MIT\"},\"contracts/pricefeeds/CustomPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\n\\ninterface ICoin {\\n\\tfunction decimals() external view returns(uint8);\\n}\\n\\ninterface ILandCore {\\n\\tevent GuardianSet(address guardian);\\n\\tevent NewOwnerTransferred(address oldOwner, address owner);\\n\\tevent Paused();\\n\\tevent Unpaused();\\n\\n\\tfunction transferOwnership(address newOwner) external;\\n\\n\\tfunction setGuardian(address _guardian) external;\\n\\n\\tfunction setPaused(bool _paused) external;\\n\\n\\tfunction guardian() external view returns (address);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\\n\\ncontract LandOwnable {\\n\\tILandCore public LandCore;\\n\\n\\tconstructor(ILandCore _LandCore) {\\n\\t\\tLandCore = _LandCore;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == owner(), \\\"Only owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyGuardian() {\\n\\t\\trequire(msg.sender == guardian(), \\\"Only guardian\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier whenNotPaused() {\\n\\t    require(!paused(), \\\"paused\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction paused() public view returns (bool) {\\n\\t\\treturn LandCore.paused();\\n\\t}\\n\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn LandCore.owner();\\n\\t}\\n\\n\\tfunction guardian() public view returns (address) {\\n\\t\\treturn LandCore.guardian();\\n\\t}\\n}\\n\\n\\n\\ncontract CustomPriceFeed is LandOwnable{\\n    uint32 public constant TWAP_PERIOD = 1800; // 30 minutes\\n    uint256 public constant Q96 = 2**96;\\n    address public targetToken;\\n    IUniswapV3Pool public pool;\\n\\t//0xEE83F6873b1d387FccdE7b1d680ff6a7281e8179 ETH / 4EVER\\n\\n    constructor(ILandCore _core, address token, address _v3Pool) LandOwnable(_core) {\\n        pool = IUniswapV3Pool(_v3Pool);\\n        targetToken = token;\\n    }\\n\\n    function fetchPrice(address token) public view returns(uint256) {\\n        require(token == address(targetToken),\\\"ICustomPriceFeed: token is not targetToken\\\");\\n        uint32[] memory secondsAgos = new uint32[](2);\\n        secondsAgos[0] = TWAP_PERIOD;\\n        secondsAgos[1] = 0;\\n        \\n        // get tickCumulatives\\n        (int56[] memory tickCumulatives, ) = pool.observe(secondsAgos);\\n        \\n        // calculate time-weighted average tick\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n        int24 timeWeightedAverageTick = int24(tickCumulativesDelta / int32(TWAP_PERIOD));\\n        \\n        // get token0 and token1\\n        address token0 = pool.token0();\\n        address token1 = pool.token1();\\n        \\n        // get decimals\\n        uint8 decimals0 = ICoin(token0).decimals();\\n        uint8 decimals1 = ICoin(token1).decimals();\\n        \\n        // calculate price\\n        uint256 price = getPriceFromTick(timeWeightedAverageTick, decimals0, decimals1);\\n        \\n        // if 4ever is token1, reverse price\\n        if (address(targetToken) == token1) {\\n            price = (1e36) / price;\\n        }\\n        \\n        return price;\\n    }\\n    \\n    function getPriceFromTick(\\n        int24 tick,\\n        uint8 decimals0,\\n        uint8 decimals1\\n    ) internal pure returns (uint256) {\\n        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(tick);\\n        \\n        // calculate price = (sqrtPrice * sqrtPrice) * (10^decimals0) / (10^decimals1) / (2^192)\\n        uint256 price = FullMath.mulDiv(\\n            uint256(sqrtPriceX96) * uint256(sqrtPriceX96),\\n            10 ** decimals0,\\n            uint256(Q96) * uint256(Q96)\\n        );\\n        \\n        // adjust price to 18 decimals\\n        if (decimals1 < 18) {\\n            price = price * (10 ** (18 - decimals1));\\n        } else if (decimals1 > 18) {\\n            price = price / (10 ** (decimals1 - 18));\\n        }\\n        \\n        return price;\\n    }\\n}\\n\",\"keccak256\":\"0xeed2d2887c022420ee4ce59777f0c84e690967706f1ec0167cda8d1371552e20\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d00380380610d008339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b039384166001600160a01b031991821617909155600280549284169282169290921790915560018054929093169116179055610c738061008d6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80635c975abb116100665780635c975abb146100e65780637ca25184146101025780638da5cb5b14610123578063ace1798e1461012b578063ce6d603f1461015157610093565b806316f0115b14610098578063327107f7146100bc57806340792465146100c4578063452a9320146100de575b600080fd5b6100a0610159565b604080516001600160a01b039092168252519081900360200190f35b6100a0610168565b6100cc610177565b60408051918252519081900360200190f35b6100a061017f565b6100ee6101ff565b604080519115158252519081900360200190f35b61010a61024e565b6040805163ffffffff9092168252519081900360200190f35b6100a0610254565b6100cc6004803603602081101561014157600080fd5b50356001600160a01b03166102a3565b6100a06107a7565b6002546001600160a01b031681565b6001546001600160a01b031681565b600160601b81565b60008060009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ce57600080fd5b505afa1580156101e2573d6000803e3d6000fd5b505050506040513d60208110156101f857600080fd5b5051905090565b60008060009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ce57600080fd5b61070881565b60008060009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ce57600080fd5b6001546000906001600160a01b038381169116146102f25760405162461bcd60e51b815260040180806020018281038252602a815260200180610c14602a913960400191505060405180910390fd5b6040805160028082526060820183526000926020830190803683370190505090506107088160008151811061032357fe5b602002602001019063ffffffff16908163ffffffff168152505060008160018151811061034c57fe5b63ffffffff90921660209283029190910182015260025460405163883bdbfd60e01b8152600481018381528451602483015284516000946001600160a01b039094169363883bdbfd93879392839260449092019185810191028083838b5b838110156103c25781810151838201526020016103aa565b505050509050019250505060006040518083038186803b1580156103e557600080fd5b505afa1580156103f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561042257600080fd5b810190808051604051939291908464010000000082111561044257600080fd5b90830190602082018581111561045757600080fd5b825186602082028301116401000000008211171561047457600080fd5b82525081516020918201928201910280838360005b838110156104a1578181015183820152602001610489565b50505050905001604052602001805160405193929190846401000000008211156104ca57600080fd5b9083019060208201858111156104df57600080fd5b82518660208202830111640100000000821117156104fc57600080fd5b82525081516020918201928201910280838360005b83811015610529578181015183820152602001610511565b5050505090500160405250505050905060008160008151811061054857fe5b60200260200101518260018151811061055d57fe5b6020026020010151039050600061070860030b8260060b8161057b57fe5b0590506000600260009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b505050506040513d60208110156105f857600080fd5b50516002546040805163d21220a760e01b815290519293506000926001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d602081101561066f57600080fd5b50516040805163313ce56760e01b815290519192506000916001600160a01b0385169163313ce567916004808301926020929190829003018186803b1580156106b757600080fd5b505afa1580156106cb573d6000803e3d6000fd5b505050506040513d60208110156106e157600080fd5b50516040805163313ce56760e01b815290519192506000916001600160a01b0385169163313ce567916004808301926020929190829003018186803b15801561072957600080fd5b505afa15801561073d573d6000803e3d6000fd5b505050506040513d602081101561075357600080fd5b5051905060006107648684846107b6565b6001549091506001600160a01b038581169116141561079957806ec097ce7bc90715b34b9f10000000008161079557fe5b0490505b9a9950505050505050505050565b6000546001600160a01b031681565b6000806107c285610832565b905060006107e66001600160a01b038316800260ff8716600a0a600160c01b610b64565b905060128460ff1610156108055760ff601285900316600a0a02610827565b60128460ff161115610827576012840360ff16600a0a818161082357fe5b0490505b9150505b9392505050565b60008060008360020b12610849578260020b610851565b8260020b6000035b9050620d89e881111561088f576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b6000600182166108a357600160801b6108b5565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156108e9576ffff97272373d413259a46990580e213a0260801c5b6004821615610908576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610927576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610946576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610965576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610984576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156109a3576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156109c3576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156109e3576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610a03576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610a23576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610a43576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610a63576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610a83576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610aa3576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610ac4576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610ae4576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610b03576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610b20576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610b3b578060001981610b3757fe5b0490505b640100000000810615610b4f576001610b52565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080610b9a5760008411610b8f57600080fd5b50829004905061082b565b808411610ba657600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a0290910302918190038190046001018684119095039490940291909403929092049190911791909102915050939250505056fe49437573746f6d5072696365466565643a20746f6b656e206973206e6f7420746172676574546f6b656ea2646970667358221220945e5f239259c07dff6a2eb78f4f9cb0de77dc9ae2539737cd4f006726926ec164736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80635c975abb116100665780635c975abb146100e65780637ca25184146101025780638da5cb5b14610123578063ace1798e1461012b578063ce6d603f1461015157610093565b806316f0115b14610098578063327107f7146100bc57806340792465146100c4578063452a9320146100de575b600080fd5b6100a0610159565b604080516001600160a01b039092168252519081900360200190f35b6100a0610168565b6100cc610177565b60408051918252519081900360200190f35b6100a061017f565b6100ee6101ff565b604080519115158252519081900360200190f35b61010a61024e565b6040805163ffffffff9092168252519081900360200190f35b6100a0610254565b6100cc6004803603602081101561014157600080fd5b50356001600160a01b03166102a3565b6100a06107a7565b6002546001600160a01b031681565b6001546001600160a01b031681565b600160601b81565b60008060009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ce57600080fd5b505afa1580156101e2573d6000803e3d6000fd5b505050506040513d60208110156101f857600080fd5b5051905090565b60008060009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ce57600080fd5b61070881565b60008060009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ce57600080fd5b6001546000906001600160a01b038381169116146102f25760405162461bcd60e51b815260040180806020018281038252602a815260200180610c14602a913960400191505060405180910390fd5b6040805160028082526060820183526000926020830190803683370190505090506107088160008151811061032357fe5b602002602001019063ffffffff16908163ffffffff168152505060008160018151811061034c57fe5b63ffffffff90921660209283029190910182015260025460405163883bdbfd60e01b8152600481018381528451602483015284516000946001600160a01b039094169363883bdbfd93879392839260449092019185810191028083838b5b838110156103c25781810151838201526020016103aa565b505050509050019250505060006040518083038186803b1580156103e557600080fd5b505afa1580156103f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561042257600080fd5b810190808051604051939291908464010000000082111561044257600080fd5b90830190602082018581111561045757600080fd5b825186602082028301116401000000008211171561047457600080fd5b82525081516020918201928201910280838360005b838110156104a1578181015183820152602001610489565b50505050905001604052602001805160405193929190846401000000008211156104ca57600080fd5b9083019060208201858111156104df57600080fd5b82518660208202830111640100000000821117156104fc57600080fd5b82525081516020918201928201910280838360005b83811015610529578181015183820152602001610511565b5050505090500160405250505050905060008160008151811061054857fe5b60200260200101518260018151811061055d57fe5b6020026020010151039050600061070860030b8260060b8161057b57fe5b0590506000600260009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b505050506040513d60208110156105f857600080fd5b50516002546040805163d21220a760e01b815290519293506000926001600160a01b039092169163d21220a791600480820192602092909190829003018186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d602081101561066f57600080fd5b50516040805163313ce56760e01b815290519192506000916001600160a01b0385169163313ce567916004808301926020929190829003018186803b1580156106b757600080fd5b505afa1580156106cb573d6000803e3d6000fd5b505050506040513d60208110156106e157600080fd5b50516040805163313ce56760e01b815290519192506000916001600160a01b0385169163313ce567916004808301926020929190829003018186803b15801561072957600080fd5b505afa15801561073d573d6000803e3d6000fd5b505050506040513d602081101561075357600080fd5b5051905060006107648684846107b6565b6001549091506001600160a01b038581169116141561079957806ec097ce7bc90715b34b9f10000000008161079557fe5b0490505b9a9950505050505050505050565b6000546001600160a01b031681565b6000806107c285610832565b905060006107e66001600160a01b038316800260ff8716600a0a600160c01b610b64565b905060128460ff1610156108055760ff601285900316600a0a02610827565b60128460ff161115610827576012840360ff16600a0a818161082357fe5b0490505b9150505b9392505050565b60008060008360020b12610849578260020b610851565b8260020b6000035b9050620d89e881111561088f576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b6000600182166108a357600160801b6108b5565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156108e9576ffff97272373d413259a46990580e213a0260801c5b6004821615610908576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610927576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610946576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610965576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610984576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156109a3576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156109c3576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156109e3576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610a03576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610a23576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610a43576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610a63576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610a83576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610aa3576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610ac4576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610ae4576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610b03576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610b20576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610b3b578060001981610b3757fe5b0490505b640100000000810615610b4f576001610b52565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080610b9a5760008411610b8f57600080fd5b50829004905061082b565b808411610ba657600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a0290910302918190038190046001018684119095039490940291909403929092049190911791909102915050939250505056fe49437573746f6d5072696365466565643a20746f6b656e206973206e6f7420746172676574546f6b656ea2646970667358221220945e5f239259c07dff6a2eb78f4f9cb0de77dc9ae2539737cd4f006726926ec164736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 807,
        "contract": "contracts/pricefeeds/CustomPriceFeed.sol:CustomPriceFeed",
        "label": "LandCore",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ILandCore)805"
      },
      {
        "astId": 897,
        "contract": "contracts/pricefeeds/CustomPriceFeed.sol:CustomPriceFeed",
        "label": "targetToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 899,
        "contract": "contracts/pricefeeds/CustomPriceFeed.sol:CustomPriceFeed",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV3Pool)749"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ILandCore)805": {
        "encoding": "inplace",
        "label": "contract ILandCore",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Pool)749": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Pool",
        "numberOfBytes": "20"
      }
    }
  }
}