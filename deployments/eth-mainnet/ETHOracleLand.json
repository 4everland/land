{
  "address": "0x848b562512eD60B4715000b919C54e37B56f551D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ICoin",
          "name": "coin",
          "type": "address"
        }
      ],
      "name": "AddCoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "contract ICoin",
          "name": "coin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "landAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalLandAmount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ICoin",
          "name": "coin",
          "type": "address"
        }
      ],
      "name": "RemoveCoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ICoin",
          "name": "coin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawnCoin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LandCore",
      "outputs": [
        {
          "internalType": "contract ILandCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoin",
          "name": "coin",
          "type": "address"
        }
      ],
      "name": "addCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "to",
          "type": "bytes32"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "coinAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoin",
          "name": "coin",
          "type": "address"
        }
      ],
      "name": "coinExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coinLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoin",
          "name": "coin",
          "type": "address"
        }
      ],
      "name": "decimalsOf",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "contract ICoin",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetch4everPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoin",
          "name": "coin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "formatValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILandCore",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "contract IPriceFeed",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "contract ICoin[]",
          "name": "_coins",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "landPerCoin",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoin",
          "name": "coin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintBy4EVER",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "mintByETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed4EVER",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "_4everPriceFeed",
          "type": "address"
        },
        {
          "internalType": "contract ICoin",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "reinitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoin",
          "name": "coin",
          "type": "address"
        }
      ],
      "name": "removeCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "set4everPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetPriceDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token_4ever",
      "outputs": [
        {
          "internalType": "contract ICoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoin",
          "name": "coin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbcecd4c492a77c6e99904b9f576055203f57fa312426a5ffa87544290f27a820",
  "receipt": {
    "to": null,
    "from": "0x7B62c4Cd23D8F6bBDDD2Ec81160C5D609D47abeb",
    "contractAddress": "0x848b562512eD60B4715000b919C54e37B56f551D",
    "transactionIndex": 77,
    "gasUsed": "1937842",
    "logsBloom": "0x
    "blockHash": "0xaa33d37e58d5acb5dbda6c489af30d558b9c2c7f428218a62c73fd5484349f2f",
    "transactionHash": "0xbcecd4c492a77c6e99904b9f576055203f57fa312426a5ffa87544290f27a820",
    "logs": [],
    "blockNumber": 21885767,
    "cumulativeGasUsed": "8379053",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "119b1aff598b48aa1c0cf952bbfd3577",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICoin\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"AddCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract ICoin\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"landAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLandAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICoin\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"RemoveCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICoin\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnCoin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LandCore\",\"outputs\":[{\"internalType\":\"contract ILandCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoin\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"addCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"coinAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoin\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"coinExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoin\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"decimalsOf\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"contract ICoin\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetch4everPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoin\",\"name\":\"coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"formatValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILandCore\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IPriceFeed\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"contract ICoin[]\",\"name\":\"_coins\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landPerCoin\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoin\",\"name\":\"coin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintBy4EVER\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"mintByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed4EVER\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"_4everPriceFeed\",\"type\":\"address\"},{\"internalType\":\"contract ICoin\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reinitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoin\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"removeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"set4everPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetPriceDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_4ever\",\"outputs\":[{\"internalType\":\"contract ICoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoin\",\"name\":\"coin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracleland/ETHOracleLand.sol\":\"ETHOracleLand\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x7ebfe2422bc571599c2ec20577d7848e1e7a0acf85fa7c2d9636618bbbdf6fca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/core/Land.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"../dependencies/LandOwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILand.sol\\\";\\n\\ncontract Land is ILand, LandOwnableUpgradeable {\\n\\tusing EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\tuint64 public constant landPerCoin = 1e6;\\n\\tuint8 public constant targetPriceDecimals = 18;\\n\\tEnumerableMap.AddressToUintMap internal coins;\\n\\tmapping(bytes32 => uint256) internal balances;\\n\\tmapping(bytes32 => mapping(ICoin => uint256)) public deposits;\\n\\n\\tfunction __Init_Coins(ICoin[] memory _coins) internal {\\n\\t\\tfor (uint64 i = 0; i < _coins.length; i++) {\\n\\t\\t\\t_addCoin(_coins[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction mint(ICoin coin, bytes32 account, uint256 amount) external whenNotPaused {\\n\\t\\trequire(coinExists(coin), \\\"Land: nonexistent coin\\\");\\n\\t\\t(bool success1,) = address(coin).call(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", msg.sender, address(this), amount));\\n\\t\\trequire(success1, \\\"Land: transfer from failed\\\");\\n\\t\\tuint256 coinAmount = formatValue(coin, amount);\\n\\t\\tuint256 landAmount = coinAmount * landPerCoin;\\n\\t\\tbalances[account] += landAmount;\\n\\t\\tdeposits[account][coin] += amount;\\n\\t\\t(bool success2,) = address(coin).call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", owner(), amount));\\n\\t\\trequire(success2, \\\"Land: transfer failed\\\");\\n\\t\\temit Mint(account, coin, amount, coinAmount, landAmount, balances[account]);\\n\\t}\\n\\n\\tfunction addCoin(ICoin coin) external onlyGuardian {\\n\\t\\t_addCoin(coin);\\n\\t}\\n\\n\\tfunction _addCoin(ICoin coin) internal {\\n\\t\\trequire(!coinExists(coin), \\\"Land: coin exists\\\");\\n\\t\\tuint8 decimals = coin.decimals();\\n\\t\\tcoins.set(address(coin), decimals);\\n\\t\\temit AddCoin(coin);\\n\\t}\\n\\n\\tfunction removeCoin(ICoin coin) external onlyGuardian {\\n\\t\\t_removeCoin(coin);\\n\\t}\\n\\n\\tfunction _removeCoin(ICoin coin) internal {\\n\\t\\trequire(coinExists(coin), \\\"Land: nonexistent coin\\\");\\n\\t\\tcoins.remove(address(coin));\\n\\t\\temit RemoveCoin(coin);\\n\\t}\\n\\n\\tfunction coinLength() public view returns(uint256) {\\n\\t\\treturn coins.length();\\n\\t}\\n\\n\\tfunction coinAt(uint256 i) public view returns(address, uint256) {\\n\\t\\treturn coins.at(i);\\n\\t}\\n\\n\\tfunction coinExists(ICoin coin) public view returns(bool) {\\n\\t\\treturn coins.contains(address(coin));\\n\\t}\\n\\n\\tfunction decimalsOf(ICoin coin) public view returns(uint8) {\\n\\t\\treturn uint8(coins.get(address(coin)));\\n\\t}\\n\\n\\tfunction balanceOf(bytes32 to) public view returns(uint256) {\\n\\t\\treturn balances[to];\\n\\t}\\n\\n\\tfunction formatValue(ICoin coin, uint256 amount) public view returns(uint256) {\\n\\t\\tuint8 decimals = decimalsOf(coin);\\n\\t\\tif (decimals < targetPriceDecimals) {\\n\\t\\t\\treturn amount * (10 ** (targetPriceDecimals - decimals));\\n\\t\\t} else if (decimals  > targetPriceDecimals) {\\n\\t\\t\\treturn amount / (10 ** (targetPriceDecimals - decimals));\\n\\t\\t}\\n\\t\\treturn amount;\\n\\t}\\n\\n\\tfunction withdraw(ICoin coin, address to, uint256 amount) external onlyOwner {\\n\\t\\tif (address(coin) != address(0)) {\\n\\t\\t\\tcoin.transfer(to, amount);\\n\\t\\t} else {\\n\\t\\t\\t(bool success,) = to.call{value: amount}(\\\"\\\");\\n\\t\\t\\trequire(success, \\\"Land: tranfer failed\\\");\\n\\t\\t}\\n\\t\\temit WithdrawnCoin(coin, to, amount);\\n\\t}\\n\\n}\",\"keccak256\":\"0x577b2537ec089d3fb5d5275d5a6eaae6b81574a72d6930f261658a1a920dbca9\",\"license\":\"MIT\"},\"contracts/dependencies/LandOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/ILandCore.sol\\\";\\n\\ncontract LandOwnableUpgradeable is Initializable {\\n\\tILandCore public LandCore;\\n\\n\\tfunction __InitCore(ILandCore _LandCore) internal {\\n\\t\\tLandCore = _LandCore;\\n\\t}\\n\\n\\t\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == owner(), \\\"Only owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyGuardian() {\\n\\t\\trequire(msg.sender == guardian(), \\\"Only guardian\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier whenNotPaused() {\\n\\t    require(!paused(), \\\"paused\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction paused() public view returns (bool) {\\n\\t\\treturn LandCore.paused();\\n\\t}\\n\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn LandCore.owner();\\n\\t}\\n\\n\\tfunction guardian() public view returns (address) {\\n\\t\\treturn LandCore.guardian();\\n\\t}\\n}\\n\",\"keccak256\":\"0x2a534fdb7f910ecea57c353fa0850d6224e3bb80ec8c00e1f84887c39d67cab6\",\"license\":\"MIT\"},\"contracts/interfaces/ICoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICoin is IERC20 {\\n\\tfunction decimals() external view returns(uint8);\\n}\",\"keccak256\":\"0x6f7315ac80b4b6441b9a8f606fdc238511f4771e05ca79ed42c411f8f5b4cbba\",\"license\":\"MIT\"},\"contracts/interfaces/ILand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./ICoin.sol\\\";\\n\\ninterface ILand {\\n\\tevent AddCoin(ICoin coin);\\n\\n\\tevent RemoveCoin(ICoin coin);\\n\\n\\tevent WithdrawnCoin(ICoin coin, address to, uint256 amount);\\n\\n\\tevent Mint(bytes32 account, ICoin coin, uint256 value, uint256 coinAmount, uint256 landAmount, uint256 totalLandAmount);\\n\\n\\tfunction mint(ICoin coin, bytes32 account, uint256 amount) external;\\n\\n\\tfunction addCoin(ICoin coin) external;\\n\\n\\tfunction coinExists(ICoin coin) external view returns(bool);\\n\\n\\tfunction decimalsOf(ICoin coin) external view returns(uint8);\\n\\n\\tfunction balanceOf(bytes32 account) external view returns(uint256);\\n\\n\\tfunction formatValue(ICoin coin, uint256 amount) external view returns(uint256);\\n\\n\\tfunction withdraw(ICoin coin, address to, uint256 amount) external;\\n}\",\"keccak256\":\"0xa21d600e56c8cddb7b40bdde4d2bb9ba109c34fc5d8353c23d41bdbdb2ea620c\",\"license\":\"MIT\"},\"contracts/interfaces/ILandCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ILandCore {\\n\\tevent GuardianSet(address guardian);\\n\\tevent NewOwnerTransferred(address oldOwner, address owner);\\n\\tevent Paused();\\n\\tevent Unpaused();\\n\\n\\tfunction transferOwnership(address newOwner) external;\\n\\n\\tfunction setGuardian(address _guardian) external;\\n\\n\\tfunction setPaused(bool _paused) external;\\n\\n\\tfunction guardian() external view returns (address);\\n\\n\\tfunction owner() external view returns (address);\\n\\n\\tfunction paused() external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x360053b8d1d99adb7a780190188bce982350acf2d65390845fa31d0159812b82\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IPriceFeed {\\n\\tfunction fetchPrice(address _token) external returns (uint256);\\n}\",\"keccak256\":\"0xf298abf4595960141fa86c10732d792060661e9dd09ef9ae463afc8e5f8800f0\",\"license\":\"MIT\"},\"contracts/oracleland/ETHOracleLand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"../core/Land.sol\\\";\\nimport \\\"../interfaces/IPriceFeed.sol\\\";\\nimport \\\"../interfaces/ICoin.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract ETHOracleLand is Land {\\n\\tIPriceFeed public priceFeed;\\n    IPriceFeed public priceFeed4EVER;\\n    ICoin public token_4ever;\\n\\n\\n\\tfunction initialize(ILandCore _core, IPriceFeed _priceFeed, ICoin[] memory _coins) external initializer {\\n\\t\\t__InitCore(_core);\\n\\t\\t__Init_Price_Feed(_priceFeed);\\n\\t\\t__Init_Coins(_coins);\\n\\t}\\n\\n\\tfunction reinitialize( IPriceFeed _4everPriceFeed , ICoin token) external reinitializer(2){\\n\\t\\t__Init_4ever_address(token);\\n\\t\\t__Init_4ever_Price_Feed(_4everPriceFeed);\\n\\t}\\n\\n\\n\\tfunction __Init_Price_Feed(IPriceFeed _priceFeed) internal {\\n\\t\\tpriceFeed = _priceFeed;\\n\\t\\t// check feed is working\\n\\t\\tfetchPrice();\\n\\t}\\n\\n\\tfunction __Init_4ever_Price_Feed(IPriceFeed _priceFeed) internal {\\n\\t\\tpriceFeed4EVER = _priceFeed;\\n\\t\\t// check feed is working\\n\\t\\tfetch4everPrice();\\n\\t}\\n\\n\\tfunction __Init_4ever_address(ICoin token) internal {\\n\\t\\ttoken_4ever = token;\\n\\t}\\n\\n\\n\\tfunction mintByETH(bytes32 account) external payable whenNotPaused {\\n\\t\\tICoin eth = ICoin(address(0));\\n\\t\\tuint256 price = fetchPrice();\\n\\t\\tuint256 coinAmount = msg.value * price / 1e18;\\n\\t\\tuint256 landAmount = coinAmount * landPerCoin;\\n\\t\\tbalances[account] += landAmount;\\n\\t\\towner().call{value: msg.value}(\\\"\\\");\\n\\t\\tdeposits[account][eth] += msg.value;\\n\\t\\temit Mint(account, eth, msg.value, coinAmount, landAmount, balances[account]);\\n\\t}\\n\\n    function mintBy4EVER(bytes32 account,uint256 amount)external payable whenNotPaused {\\n        token_4ever.transferFrom(msg.sender,address(this),amount);\\n        uint256 price = fetch4everPrice(); // ETH/TOKEN\\n\\t\\tuint256 ethAmount = amount * price / 1e18;\\n\\t\\tuint256 ethPrice = fetchPrice();\\n\\t\\tuint256 coinAmount = ethAmount * ethPrice / 1e18;\\n        uint256 landAmount = coinAmount * landPerCoin;\\n        balances[account] += landAmount;\\n        token_4ever.transfer(owner(),amount);\\n        deposits[account][token_4ever] += amount;\\n        emit Mint(account, token_4ever, amount, coinAmount, landAmount, balances[account]);\\n    }\\n\\n\\n\\t// function calculateLandAmount(uint256 amount) public returns(uint256,uint256,uint256) {\\n\\t//    uint256 price = fetch4everPrice(); // ETH/TOKEN\\n\\t// \\tuint256 ethAmount = amount * price / 1e18;\\n\\t// \\tuint256 ethPrice = fetchPrice();\\n\\t// \\tuint256 coinAmount = ethAmount * ethPrice / 1e18;\\n    //     uint256 landAmount = coinAmount * landPerCoin;\\n\\t// \\tconsole.log(\\\"price\\\",price);\\n\\t// \\tconsole.log(\\\"ethAmount\\\",ethAmount);\\n\\t// \\tconsole.log(\\\"ethPrice\\\",ethPrice);\\n\\t// \\tconsole.log(\\\"coinAmount\\\",coinAmount);\\n\\t// \\tconsole.log(\\\"landAmount\\\",landAmount);\\n\\t// }\\n\\n\\tfunction fetchPrice() public returns(uint256) {\\n\\t\\treturn priceFeed.fetchPrice(address(0));\\n\\t}\\n\\n    function fetch4everPrice() public returns(uint256) {\\n        return priceFeed4EVER.fetchPrice(address(token_4ever));\\n    }\\n\\n\\tfunction setPriceFeed(IPriceFeed _priceFeed) external onlyOwner {\\n\\t\\tpriceFeed = _priceFeed;\\n\\t}\\n\\n    function set4everPriceFeed(IPriceFeed _priceFeed) external onlyOwner {\\n        priceFeed4EVER = _priceFeed;\\n    }\\n}\",\"keccak256\":\"0x7a4900a1d06f9c1f5eeb7779e37af17d0a67d6d8f7a419f12fa7c83b563e5aeb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612219806100206000396000f3fe6080604052600436106101b75760003560e01c806377a24f36116100ec578063a9d951a31161008a578063cbbcb64711610064578063cbbcb647146104e5578063ce6d603f14610505578063d9caed121461052b578063ea590dd51461054b57600080fd5b8063a9d951a314610490578063b2eee5c0146104b0578063c89dcfce146104c557600080fd5b806388363bf6116100c657806388363bf6146104265780638da5cb5b14610446578063908d51f51461045b578063a281ccca1461047057600080fd5b806377a24f36146103b45780637f64cc25146103d457806382f3ff821461040257600080fd5b80634f1c2c31116101595780635e2d7433116101335780635e2d7433146103275780636c7f154214610347578063724e78da14610374578063741bef1a1461039457600080fd5b80634f1c2c31146102ba5780635850700c146102f25780635c975abb1461031257600080fd5b806326ba3f531161019557806326ba3f531461021c57806332bc30f614610249578063452a93201461026b5780634df9ca161461028d57600080fd5b80630fdb11cf146101bc57806316da8632146101e7578063250576da14610209575b600080fd5b3480156101c857600080fd5b506101d161055e565b6040516101de91906117b6565b60405180910390f35b3480156101f357600080fd5b506102076102023660046117ff565b6105d7565b005b610207610217366004611831565b610624565b34801561022857600080fd5b5060085461023c906001600160a01b031681565b6040516101de9190611866565b34801561025557600080fd5b5061025e601281565b6040516101de919061187d565b34801561027757600080fd5b506102806107a3565b6040516101de9190611894565b34801561029957600080fd5b506102ad6102a83660046117ff565b61081b565b6040516101de91906118aa565b3480156102c657600080fd5b506101d16102d53660046118b8565b600560209081526000928352604080842090915290825290205481565b3480156102fe57600080fd5b5060075461023c906001600160a01b031681565b34801561031e57600080fd5b506102ad61082e565b34801561033357600080fd5b5061025e6103423660046117ff565b6108a6565b34801561035357600080fd5b506101d1610362366004611831565b60009081526004602052604090205490565b34801561038057600080fd5b5061020761038f3660046117ff565b6108b3565b3480156103a057600080fd5b5060065461023c906001600160a01b031681565b3480156103c057600080fd5b506102076103cf3660046119fc565b61090d565b3480156103e057600080fd5b506103f46103ef366004611831565b610a0b565b6040516101de929190611a67565b34801561040e57600080fd5b50610419620f424081565b6040516101de9190611a92565b34801561043257600080fd5b506102076104413660046117ff565b610a22565b34801561045257600080fd5b50610280610a63565b34801561046757600080fd5b506101d1610ab7565b34801561047c57600080fd5b5061020761048b3660046117ff565b610ac3565b34801561049c57600080fd5b506102076104ab366004611aa0565b610b1d565b3480156104bc57600080fd5b506101d1610bdd565b3480156104d157600080fd5b506102076104e0366004611ac2565b610c15565b3480156104f157600080fd5b506101d1610500366004611b08565b610eaf565b34801561051157600080fd5b5060005461023c906201000090046001600160a01b031681565b34801561053757600080fd5b50610207610546366004611b4f565b610f25565b610207610559366004611b84565b611094565b600654604051635670bcc760e11b81526000916001600160a01b03169063ace1798e9061058f908490600401611894565b6020604051808303816000875af11580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d29190611bb1565b905090565b6105df6107a3565b6001600160a01b0316336001600160a01b0316146106185760405162461bcd60e51b815260040161060f90611bf9565b60405180910390fd5b610621816112ce565b50565b61062c61082e565b156106495760405162461bcd60e51b815260040161060f90611c26565b60008061065461055e565b90506000670de0b6b3a764000061066b8334611c4c565b6106759190611c7a565b90506000610686620f424083611c4c565b9050806004600087815260200190815260200160002060008282546106ab9190611c8e565b909155506106b99050610a63565b6001600160a01b0316346040516106cf90611ca1565b60006040518083038185875af1925050503d806000811461070c576040519150601f19603f3d011682016040523d82523d6000602084013e610711565b606091505b50505060008581526005602090815260408083206001600160a01b038816845290915281208054349290610746908490611c8e565b9091555050600085815260046020526040908190205490517f6c25b193a57bcfde4968cefddf7b4de59a5058812b4da55cb997fafd9e93fdc291610794918891889134918891889190611ca9565b60405180910390a15050505050565b60008060029054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d29190611d0e565b60006108286001836113a5565b92915050565b60008060029054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d29190611d42565b60006108286001836113c1565b6108bb610a63565b6001600160a01b0316336001600160a01b0316146108eb5760405162461bcd60e51b815260040161060f90611d84565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff161580801561092d5750600054600160ff909116105b806109475750303b158015610947575060005460ff166001145b6109635760405162461bcd60e51b815260040161060f90611d94565b6000805460ff191660011790558015610986576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b038716021790556109b1836113d6565b6109ba826113fd565b8015610a05576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906109fc90600190611dfa565b60405180910390a15b50505050565b600080610a19600184611451565b91509150915091565b610a2a6107a3565b6001600160a01b0316336001600160a01b031614610a5a5760405162461bcd60e51b815260040161060f90611bf9565b6106218161146d565b60008060029054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f7573d6000803e3d6000fd5b60006105d260016114d8565b610acb610a63565b6001600160a01b0316336001600160a01b031614610afb5760405162461bcd60e51b815260040161060f90611d84565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600054600290610100900460ff16158015610b3f575060005460ff8083169116105b610b5b5760405162461bcd60e51b815260040161060f90611d94565b6000805461ffff191660ff831617610100179055600880546001600160a01b0384166001600160a01b0319909116179055610b95836114e3565b6000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610bd090839061187d565b60405180910390a1505050565b600754600854604051635670bcc760e11b81526000926001600160a01b039081169263ace1798e9261058f9290911690600401611894565b610c1d61082e565b15610c3a5760405162461bcd60e51b815260040161060f90611c26565b610c438361081b565b610c5f5760405162461bcd60e51b815260040161060f90611e35565b6000836001600160a01b0316333084604051602401610c8093929190611e45565b60408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b17905251610cb59190611eb3565b6000604051808303816000865af19150503d8060008114610cf2576040519150601f19603f3d011682016040523d82523d6000602084013e610cf7565b606091505b5050905080610d185760405162461bcd60e51b815260040161060f90611ef3565b6000610d248584610eaf565b90506000610d35620f424083611c4c565b905080600460008781526020019081526020016000206000828254610d5a9190611c8e565b909155505060008581526005602090815260408083206001600160a01b038a16845290915281208054869290610d91908490611c8e565b90915550600090506001600160a01b038716610dab610a63565b86604051602401610dbd929190611a67565b60408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b17905251610df29190611eb3565b6000604051808303816000865af19150503d8060008114610e2f576040519150601f19603f3d011682016040523d82523d6000602084013e610e34565b606091505b5050905080610e555760405162461bcd60e51b815260040161060f90611f2f565b600086815260046020526040908190205490517f6c25b193a57bcfde4968cefddf7b4de59a5058812b4da55cb997fafd9e93fdc291610e9e9189918b918a918991899190611ca9565b60405180910390a150505050505050565b600080610ebb846108a6565b9050601260ff82161015610ef157610ed4816012611f3f565b610edf90600a61206a565b610ee99084611c4c565b915050610828565b601260ff82161115610f1d57610f08816012611f3f565b610f1390600a61206a565b610ee99084611c7a565b509092915050565b610f2d610a63565b6001600160a01b0316336001600160a01b031614610f5d5760405162461bcd60e51b815260040161060f90611d84565b6001600160a01b03831615610fe35760405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90610f9a9085908590600401611a67565b6020604051808303816000875af1158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd9190611d42565b50611061565b6000826001600160a01b031682604051610ffc90611ca1565b60006040518083038185875af1925050503d8060008114611039576040519150601f19603f3d011682016040523d82523d6000602084013e61103e565b606091505b505090508061105f5760405162461bcd60e51b815260040161060f906120aa565b505b7f0ab59fee85bfb311ebc31e0ec8447cb4be3efc3381ec18bfdbea0fda61f90581838383604051610bd0939291906120ba565b61109c61082e565b156110b95760405162461bcd60e51b815260040161060f90611c26565b6008546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906110ed90339030908690600401611e45565b6020604051808303816000875af115801561110c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111309190611d42565b50600061113b610bdd565b90506000670de0b6b3a76400006111528385611c4c565b61115c9190611c7a565b9050600061116861055e565b90506000670de0b6b3a764000061117f8385611c4c565b6111899190611c7a565b9050600061119a620f424083611c4c565b9050806004600089815260200190815260200160002060008282546111bf9190611c8e565b90915550506008546001600160a01b031663a9059cbb6111dd610a63565b886040518363ffffffff1660e01b81526004016111fb929190611a67565b6020604051808303816000875af115801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e9190611d42565b5060008781526005602090815260408083206008546001600160a01b0316845290915281208054889290611273908490611c8e565b9091555050600854600088815260046020526040908190205490517f6c25b193a57bcfde4968cefddf7b4de59a5058812b4da55cb997fafd9e93fdc292610e9e928b926001600160a01b03909216918b918891889190611ca9565b6112d78161081b565b156112f45760405162461bcd60e51b815260040161060f906120f0565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190612114565b905061136960018360ff8416611506565b507f2ab2c06fd2d8302b1e22cbd5f1e649cac91185838abf693cce465aa2c7ac48c1826040516113999190611866565b60405180910390a15050565b60006113ba836001600160a01b038416611524565b9392505050565b60006113ba836001600160a01b038416611530565b600680546001600160a01b0319166001600160a01b0383161790556113f961055e565b5050565b60005b81518167ffffffffffffffff1610156113f95761143f828267ffffffffffffffff168151811061143257611432612135565b60200260200101516112ce565b806114498161214b565b915050611400565b60008080806114608686611570565b9097909650945050505050565b6114768161081b565b6114925760405162461bcd60e51b815260040161060f90611e35565b61149d60018261159b565b507facfb0f9f01902d0db1b0291da3b60229e2f15b74d078f3fcc726331181c5a777816040516114cd9190611866565b60405180910390a150565b6000610828826115b0565b600780546001600160a01b0319166001600160a01b0383161790556113f9610bdd565b600061151c846001600160a01b038516846115bb565b949350505050565b60006113ba83836115d8565b60008181526002830160205260408120548015158061155457506115548484611524565b6113ba5760405162461bcd60e51b815260040161060f906121aa565b6000808061157e85856115f0565b600081815260029690960160205260409095205494959350505050565b60006113ba836001600160a01b0384166115fc565b600061082882611619565b6000828152600284016020526040812082905561151c8484611623565b600081815260018301602052604081205415156113ba565b60006113ba838361162f565b600081815260028301602052604081208190556113ba8383611659565b6000610828825490565b60006113ba8383611665565b600082600001828154811061164657611646612135565b9060005260206000200154905092915050565b60006113ba83836116b4565b60008181526001830160205260408120546116ac57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610828565b506000610828565b6000818152600183016020526040812054801561179d5760006116d86001836121ba565b85549091506000906116ec906001906121ba565b905081811461175157600086600001828154811061170c5761170c612135565b906000526020600020015490508087600001848154811061172f5761172f612135565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611762576117626121cd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610828565b6000915050610828565b5092915050565b805b82525050565b6020810161082882846117ae565b60006001600160a01b038216610828565b6000610828826117c4565b6117e9816117d5565b811461062157600080fd5b8035610828816117e0565b60006020828403121561181457611814600080fd5b600061151c84846117f4565b806117e9565b803561082881611820565b60006020828403121561184657611846600080fd5b600061151c8484611826565b6000610828826117d5565b6117b081611852565b60208101610828828461185d565b60ff81166117b0565b602081016108288284611874565b6117b0816117c4565b60208101610828828461188b565b8015156117b0565b6020810161082882846118a2565b600080604083850312156118ce576118ce600080fd5b60006118da8585611826565b92505060206118eb858286016117f4565b9150509250929050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715611931576119316118f5565b6040525050565b600061194360405190565b905061194f828261190b565b919050565b600067ffffffffffffffff82111561196e5761196e6118f5565b5060209081020190565b600061198b61198684611954565b611938565b838152905060208082019084028301858111156119aa576119aa600080fd5b835b818110156119ce57806119bf88826117f4565b845250602092830192016119ac565b5050509392505050565b600082601f8301126119ec576119ec600080fd5b813561151c848260208601611978565b600080600060608486031215611a1457611a14600080fd5b6000611a2086866117f4565b9350506020611a31868287016117f4565b925050604084013567ffffffffffffffff811115611a5157611a51600080fd5b611a5d868287016119d8565b9150509250925092565b60408101611a75828561188b565b6113ba60208301846117ae565b67ffffffffffffffff81166117b0565b602081016108288284611a82565b60008060408385031215611ab657611ab6600080fd5b60006118da85856117f4565b600080600060608486031215611ada57611ada600080fd5b6000611ae686866117f4565b9350506020611af786828701611826565b9250506040611a5d86828701611826565b60008060408385031215611b1e57611b1e600080fd5b6000611b2a85856117f4565b92505060206118eb85828601611826565b6117e9816117c4565b803561082881611b3b565b600080600060608486031215611b6757611b67600080fd5b6000611b7386866117f4565b9350506020611af786828701611b44565b60008060408385031215611b9a57611b9a600080fd5b6000611b2a8585611826565b805161082881611820565b600060208284031215611bc657611bc6600080fd5b600061151c8484611ba6565b600d81526000602082016c27b7363c9033bab0b93234b0b760991b815291505b5060200190565b6020808252810161082881611bd2565b60068152600060208201651c185d5cd95960d21b81529150611bf2565b6020808252810161082881611c09565b634e487b7160e01b600052601160045260246000fd5b8181028082158382048514176117a7576117a7611c36565b634e487b7160e01b600052601260045260246000fd5b600082611c8957611c89611c64565b500490565b8082018082111561082857610828611c36565b600081610828565b60c08101611cb782896117ae565b611cc4602083018861185d565b611cd160408301876117ae565b611cde60608301866117ae565b611ceb60808301856117ae565b611cf860a08301846117ae565b979650505050505050565b805161082881611b3b565b600060208284031215611d2357611d23600080fd5b600061151c8484611d03565b8015156117e9565b805161082881611d2f565b600060208284031215611d5757611d57600080fd5b600061151c8484611d37565b600a81526000602082016927b7363c9037bbb732b960b11b81529150611bf2565b6020808252810161082881611d63565b6020808252810161082881602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b600060ff8216610828565b6117b081611de6565b602081016108288284611df1565b60168152600060208201752630b7321d103737b732bc34b9ba32b73a1031b7b4b760511b81529150611bf2565b6020808252810161082881611e08565b60608101611e53828661188b565b611e60602083018561188b565b61151c60408301846117ae565b60005b83811015611e88578181015183820152602001611e70565b50506000910152565b6000611e9b825190565b611ea9818560208601611e6d565b9290920192915050565b60006113ba8284611e91565b601a81526000602082017f4c616e643a207472616e736665722066726f6d206661696c656400000000000081529150611bf2565b6020808252810161082881611ebf565b601581526000602082017413185b990e881d1c985b9cd9995c8819985a5b1959605a1b81529150611bf2565b6020808252810161082881611f03565b60ff91821691908116908282039081111561082857610828611c36565b80825b6001851115611f9b57808604811115611f7a57611f7a611c36565b6001851615611f8857908102905b8002611f948560011c90565b9450611f5f565b94509492505050565b600082611fb3575060016113ba565b81611fc0575060006113ba565b8160018114611fd65760028114611fe05761200d565b60019150506113ba565b60ff841115611ff157611ff1611c36565b8360020a91508482111561200757612007611c36565b506113ba565b5060208310610133831016604e8410600b8410161715612040575081810a8381111561203b5761203b611c36565b6113ba565b61204d8484846001611f5c565b9250905081840481111561206357612063611c36565b0292915050565b600060ff831692506113ba6000198484611fa4565b601481526000602082017313185b990e881d1c985b99995c8819985a5b195960621b81529150611bf2565b602080825281016108288161207f565b60608101611e53828661185d565b60118152600060208201704c616e643a20636f696e2065786973747360781b81529150611bf2565b60208082528101610828816120c8565b60ff81166117e9565b805161082881612100565b60006020828403121561212957612129600080fd5b600061151c8484612109565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff16600067fffffffffffffffe19820161216f5761216f611c36565b5060010190565b601e81526000602082017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b6579000081529150611bf2565b6020808252810161082881612176565b8181038181111561082857610828611c36565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220030ba4dbfcdaa7da9e4b95a4d09565d239393e3e8b570ecdb038e52263d9866b64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c806377a24f36116100ec578063a9d951a31161008a578063cbbcb64711610064578063cbbcb647146104e5578063ce6d603f14610505578063d9caed121461052b578063ea590dd51461054b57600080fd5b8063a9d951a314610490578063b2eee5c0146104b0578063c89dcfce146104c557600080fd5b806388363bf6116100c657806388363bf6146104265780638da5cb5b14610446578063908d51f51461045b578063a281ccca1461047057600080fd5b806377a24f36146103b45780637f64cc25146103d457806382f3ff821461040257600080fd5b80634f1c2c31116101595780635e2d7433116101335780635e2d7433146103275780636c7f154214610347578063724e78da14610374578063741bef1a1461039457600080fd5b80634f1c2c31146102ba5780635850700c146102f25780635c975abb1461031257600080fd5b806326ba3f531161019557806326ba3f531461021c57806332bc30f614610249578063452a93201461026b5780634df9ca161461028d57600080fd5b80630fdb11cf146101bc57806316da8632146101e7578063250576da14610209575b600080fd5b3480156101c857600080fd5b506101d161055e565b6040516101de91906117b6565b60405180910390f35b3480156101f357600080fd5b506102076102023660046117ff565b6105d7565b005b610207610217366004611831565b610624565b34801561022857600080fd5b5060085461023c906001600160a01b031681565b6040516101de9190611866565b34801561025557600080fd5b5061025e601281565b6040516101de919061187d565b34801561027757600080fd5b506102806107a3565b6040516101de9190611894565b34801561029957600080fd5b506102ad6102a83660046117ff565b61081b565b6040516101de91906118aa565b3480156102c657600080fd5b506101d16102d53660046118b8565b600560209081526000928352604080842090915290825290205481565b3480156102fe57600080fd5b5060075461023c906001600160a01b031681565b34801561031e57600080fd5b506102ad61082e565b34801561033357600080fd5b5061025e6103423660046117ff565b6108a6565b34801561035357600080fd5b506101d1610362366004611831565b60009081526004602052604090205490565b34801561038057600080fd5b5061020761038f3660046117ff565b6108b3565b3480156103a057600080fd5b5060065461023c906001600160a01b031681565b3480156103c057600080fd5b506102076103cf3660046119fc565b61090d565b3480156103e057600080fd5b506103f46103ef366004611831565b610a0b565b6040516101de929190611a67565b34801561040e57600080fd5b50610419620f424081565b6040516101de9190611a92565b34801561043257600080fd5b506102076104413660046117ff565b610a22565b34801561045257600080fd5b50610280610a63565b34801561046757600080fd5b506101d1610ab7565b34801561047c57600080fd5b5061020761048b3660046117ff565b610ac3565b34801561049c57600080fd5b506102076104ab366004611aa0565b610b1d565b3480156104bc57600080fd5b506101d1610bdd565b3480156104d157600080fd5b506102076104e0366004611ac2565b610c15565b3480156104f157600080fd5b506101d1610500366004611b08565b610eaf565b34801561051157600080fd5b5060005461023c906201000090046001600160a01b031681565b34801561053757600080fd5b50610207610546366004611b4f565b610f25565b610207610559366004611b84565b611094565b600654604051635670bcc760e11b81526000916001600160a01b03169063ace1798e9061058f908490600401611894565b6020604051808303816000875af11580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d29190611bb1565b905090565b6105df6107a3565b6001600160a01b0316336001600160a01b0316146106185760405162461bcd60e51b815260040161060f90611bf9565b60405180910390fd5b610621816112ce565b50565b61062c61082e565b156106495760405162461bcd60e51b815260040161060f90611c26565b60008061065461055e565b90506000670de0b6b3a764000061066b8334611c4c565b6106759190611c7a565b90506000610686620f424083611c4c565b9050806004600087815260200190815260200160002060008282546106ab9190611c8e565b909155506106b99050610a63565b6001600160a01b0316346040516106cf90611ca1565b60006040518083038185875af1925050503d806000811461070c576040519150601f19603f3d011682016040523d82523d6000602084013e610711565b606091505b50505060008581526005602090815260408083206001600160a01b038816845290915281208054349290610746908490611c8e565b9091555050600085815260046020526040908190205490517f6c25b193a57bcfde4968cefddf7b4de59a5058812b4da55cb997fafd9e93fdc291610794918891889134918891889190611ca9565b60405180910390a15050505050565b60008060029054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d29190611d0e565b60006108286001836113a5565b92915050565b60008060029054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d29190611d42565b60006108286001836113c1565b6108bb610a63565b6001600160a01b0316336001600160a01b0316146108eb5760405162461bcd60e51b815260040161060f90611d84565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff161580801561092d5750600054600160ff909116105b806109475750303b158015610947575060005460ff166001145b6109635760405162461bcd60e51b815260040161060f90611d94565b6000805460ff191660011790558015610986576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b038716021790556109b1836113d6565b6109ba826113fd565b8015610a05576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906109fc90600190611dfa565b60405180910390a15b50505050565b600080610a19600184611451565b91509150915091565b610a2a6107a3565b6001600160a01b0316336001600160a01b031614610a5a5760405162461bcd60e51b815260040161060f90611bf9565b6106218161146d565b60008060029054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f7573d6000803e3d6000fd5b60006105d260016114d8565b610acb610a63565b6001600160a01b0316336001600160a01b031614610afb5760405162461bcd60e51b815260040161060f90611d84565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600054600290610100900460ff16158015610b3f575060005460ff8083169116105b610b5b5760405162461bcd60e51b815260040161060f90611d94565b6000805461ffff191660ff831617610100179055600880546001600160a01b0384166001600160a01b0319909116179055610b95836114e3565b6000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610bd090839061187d565b60405180910390a1505050565b600754600854604051635670bcc760e11b81526000926001600160a01b039081169263ace1798e9261058f9290911690600401611894565b610c1d61082e565b15610c3a5760405162461bcd60e51b815260040161060f90611c26565b610c438361081b565b610c5f5760405162461bcd60e51b815260040161060f90611e35565b6000836001600160a01b0316333084604051602401610c8093929190611e45565b60408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b17905251610cb59190611eb3565b6000604051808303816000865af19150503d8060008114610cf2576040519150601f19603f3d011682016040523d82523d6000602084013e610cf7565b606091505b5050905080610d185760405162461bcd60e51b815260040161060f90611ef3565b6000610d248584610eaf565b90506000610d35620f424083611c4c565b905080600460008781526020019081526020016000206000828254610d5a9190611c8e565b909155505060008581526005602090815260408083206001600160a01b038a16845290915281208054869290610d91908490611c8e565b90915550600090506001600160a01b038716610dab610a63565b86604051602401610dbd929190611a67565b60408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b17905251610df29190611eb3565b6000604051808303816000865af19150503d8060008114610e2f576040519150601f19603f3d011682016040523d82523d6000602084013e610e34565b606091505b5050905080610e555760405162461bcd60e51b815260040161060f90611f2f565b600086815260046020526040908190205490517f6c25b193a57bcfde4968cefddf7b4de59a5058812b4da55cb997fafd9e93fdc291610e9e9189918b918a918991899190611ca9565b60405180910390a150505050505050565b600080610ebb846108a6565b9050601260ff82161015610ef157610ed4816012611f3f565b610edf90600a61206a565b610ee99084611c4c565b915050610828565b601260ff82161115610f1d57610f08816012611f3f565b610f1390600a61206a565b610ee99084611c7a565b509092915050565b610f2d610a63565b6001600160a01b0316336001600160a01b031614610f5d5760405162461bcd60e51b815260040161060f90611d84565b6001600160a01b03831615610fe35760405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90610f9a9085908590600401611a67565b6020604051808303816000875af1158015610fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdd9190611d42565b50611061565b6000826001600160a01b031682604051610ffc90611ca1565b60006040518083038185875af1925050503d8060008114611039576040519150601f19603f3d011682016040523d82523d6000602084013e61103e565b606091505b505090508061105f5760405162461bcd60e51b815260040161060f906120aa565b505b7f0ab59fee85bfb311ebc31e0ec8447cb4be3efc3381ec18bfdbea0fda61f90581838383604051610bd0939291906120ba565b61109c61082e565b156110b95760405162461bcd60e51b815260040161060f90611c26565b6008546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906110ed90339030908690600401611e45565b6020604051808303816000875af115801561110c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111309190611d42565b50600061113b610bdd565b90506000670de0b6b3a76400006111528385611c4c565b61115c9190611c7a565b9050600061116861055e565b90506000670de0b6b3a764000061117f8385611c4c565b6111899190611c7a565b9050600061119a620f424083611c4c565b9050806004600089815260200190815260200160002060008282546111bf9190611c8e565b90915550506008546001600160a01b031663a9059cbb6111dd610a63565b886040518363ffffffff1660e01b81526004016111fb929190611a67565b6020604051808303816000875af115801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e9190611d42565b5060008781526005602090815260408083206008546001600160a01b0316845290915281208054889290611273908490611c8e565b9091555050600854600088815260046020526040908190205490517f6c25b193a57bcfde4968cefddf7b4de59a5058812b4da55cb997fafd9e93fdc292610e9e928b926001600160a01b03909216918b918891889190611ca9565b6112d78161081b565b156112f45760405162461bcd60e51b815260040161060f906120f0565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190612114565b905061136960018360ff8416611506565b507f2ab2c06fd2d8302b1e22cbd5f1e649cac91185838abf693cce465aa2c7ac48c1826040516113999190611866565b60405180910390a15050565b60006113ba836001600160a01b038416611524565b9392505050565b60006113ba836001600160a01b038416611530565b600680546001600160a01b0319166001600160a01b0383161790556113f961055e565b5050565b60005b81518167ffffffffffffffff1610156113f95761143f828267ffffffffffffffff168151811061143257611432612135565b60200260200101516112ce565b806114498161214b565b915050611400565b60008080806114608686611570565b9097909650945050505050565b6114768161081b565b6114925760405162461bcd60e51b815260040161060f90611e35565b61149d60018261159b565b507facfb0f9f01902d0db1b0291da3b60229e2f15b74d078f3fcc726331181c5a777816040516114cd9190611866565b60405180910390a150565b6000610828826115b0565b600780546001600160a01b0319166001600160a01b0383161790556113f9610bdd565b600061151c846001600160a01b038516846115bb565b949350505050565b60006113ba83836115d8565b60008181526002830160205260408120548015158061155457506115548484611524565b6113ba5760405162461bcd60e51b815260040161060f906121aa565b6000808061157e85856115f0565b600081815260029690960160205260409095205494959350505050565b60006113ba836001600160a01b0384166115fc565b600061082882611619565b6000828152600284016020526040812082905561151c8484611623565b600081815260018301602052604081205415156113ba565b60006113ba838361162f565b600081815260028301602052604081208190556113ba8383611659565b6000610828825490565b60006113ba8383611665565b600082600001828154811061164657611646612135565b9060005260206000200154905092915050565b60006113ba83836116b4565b60008181526001830160205260408120546116ac57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610828565b506000610828565b6000818152600183016020526040812054801561179d5760006116d86001836121ba565b85549091506000906116ec906001906121ba565b905081811461175157600086600001828154811061170c5761170c612135565b906000526020600020015490508087600001848154811061172f5761172f612135565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611762576117626121cd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610828565b6000915050610828565b5092915050565b805b82525050565b6020810161082882846117ae565b60006001600160a01b038216610828565b6000610828826117c4565b6117e9816117d5565b811461062157600080fd5b8035610828816117e0565b60006020828403121561181457611814600080fd5b600061151c84846117f4565b806117e9565b803561082881611820565b60006020828403121561184657611846600080fd5b600061151c8484611826565b6000610828826117d5565b6117b081611852565b60208101610828828461185d565b60ff81166117b0565b602081016108288284611874565b6117b0816117c4565b60208101610828828461188b565b8015156117b0565b6020810161082882846118a2565b600080604083850312156118ce576118ce600080fd5b60006118da8585611826565b92505060206118eb858286016117f4565b9150509250929050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715611931576119316118f5565b6040525050565b600061194360405190565b905061194f828261190b565b919050565b600067ffffffffffffffff82111561196e5761196e6118f5565b5060209081020190565b600061198b61198684611954565b611938565b838152905060208082019084028301858111156119aa576119aa600080fd5b835b818110156119ce57806119bf88826117f4565b845250602092830192016119ac565b5050509392505050565b600082601f8301126119ec576119ec600080fd5b813561151c848260208601611978565b600080600060608486031215611a1457611a14600080fd5b6000611a2086866117f4565b9350506020611a31868287016117f4565b925050604084013567ffffffffffffffff811115611a5157611a51600080fd5b611a5d868287016119d8565b9150509250925092565b60408101611a75828561188b565b6113ba60208301846117ae565b67ffffffffffffffff81166117b0565b602081016108288284611a82565b60008060408385031215611ab657611ab6600080fd5b60006118da85856117f4565b600080600060608486031215611ada57611ada600080fd5b6000611ae686866117f4565b9350506020611af786828701611826565b9250506040611a5d86828701611826565b60008060408385031215611b1e57611b1e600080fd5b6000611b2a85856117f4565b92505060206118eb85828601611826565b6117e9816117c4565b803561082881611b3b565b600080600060608486031215611b6757611b67600080fd5b6000611b7386866117f4565b9350506020611af786828701611b44565b60008060408385031215611b9a57611b9a600080fd5b6000611b2a8585611826565b805161082881611820565b600060208284031215611bc657611bc6600080fd5b600061151c8484611ba6565b600d81526000602082016c27b7363c9033bab0b93234b0b760991b815291505b5060200190565b6020808252810161082881611bd2565b60068152600060208201651c185d5cd95960d21b81529150611bf2565b6020808252810161082881611c09565b634e487b7160e01b600052601160045260246000fd5b8181028082158382048514176117a7576117a7611c36565b634e487b7160e01b600052601260045260246000fd5b600082611c8957611c89611c64565b500490565b8082018082111561082857610828611c36565b600081610828565b60c08101611cb782896117ae565b611cc4602083018861185d565b611cd160408301876117ae565b611cde60608301866117ae565b611ceb60808301856117ae565b611cf860a08301846117ae565b979650505050505050565b805161082881611b3b565b600060208284031215611d2357611d23600080fd5b600061151c8484611d03565b8015156117e9565b805161082881611d2f565b600060208284031215611d5757611d57600080fd5b600061151c8484611d37565b600a81526000602082016927b7363c9037bbb732b960b11b81529150611bf2565b6020808252810161082881611d63565b6020808252810161082881602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b600060ff8216610828565b6117b081611de6565b602081016108288284611df1565b60168152600060208201752630b7321d103737b732bc34b9ba32b73a1031b7b4b760511b81529150611bf2565b6020808252810161082881611e08565b60608101611e53828661188b565b611e60602083018561188b565b61151c60408301846117ae565b60005b83811015611e88578181015183820152602001611e70565b50506000910152565b6000611e9b825190565b611ea9818560208601611e6d565b9290920192915050565b60006113ba8284611e91565b601a81526000602082017f4c616e643a207472616e736665722066726f6d206661696c656400000000000081529150611bf2565b6020808252810161082881611ebf565b601581526000602082017413185b990e881d1c985b9cd9995c8819985a5b1959605a1b81529150611bf2565b6020808252810161082881611f03565b60ff91821691908116908282039081111561082857610828611c36565b80825b6001851115611f9b57808604811115611f7a57611f7a611c36565b6001851615611f8857908102905b8002611f948560011c90565b9450611f5f565b94509492505050565b600082611fb3575060016113ba565b81611fc0575060006113ba565b8160018114611fd65760028114611fe05761200d565b60019150506113ba565b60ff841115611ff157611ff1611c36565b8360020a91508482111561200757612007611c36565b506113ba565b5060208310610133831016604e8410600b8410161715612040575081810a8381111561203b5761203b611c36565b6113ba565b61204d8484846001611f5c565b9250905081840481111561206357612063611c36565b0292915050565b600060ff831692506113ba6000198484611fa4565b601481526000602082017313185b990e881d1c985b99995c8819985a5b195960621b81529150611bf2565b602080825281016108288161207f565b60608101611e53828661185d565b60118152600060208201704c616e643a20636f696e2065786973747360781b81529150611bf2565b60208082528101610828816120c8565b60ff81166117e9565b805161082881612100565b60006020828403121561212957612129600080fd5b600061151c8484612109565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff16600067fffffffffffffffe19820161216f5761216f611c36565b5060010190565b601e81526000602082017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b6579000081529150611bf2565b6020808252810161082881612176565b8181038181111561082857610828611c36565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220030ba4dbfcdaa7da9e4b95a4d09565d239393e3e8b570ecdb038e52263d9866b64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2884,
        "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
        "label": "LandCore",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ILandCore)3118"
      },
      {
        "astId": 2469,
        "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
        "label": "coins",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressToUintMap)1342_storage"
      },
      {
        "astId": 2473,
        "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2480,
        "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
        "label": "deposits",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_mapping(t_contract(ICoin)2974,t_uint256))"
      },
      {
        "astId": 3139,
        "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
        "label": "priceFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPriceFeed)3128"
      },
      {
        "astId": 3142,
        "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
        "label": "priceFeed4EVER",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IPriceFeed)3128"
      },
      {
        "astId": 3145,
        "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
        "label": "token_4ever",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ICoin)2974"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICoin)2974": {
        "encoding": "inplace",
        "label": "contract ICoin",
        "numberOfBytes": "20"
      },
      "t_contract(ILandCore)3118": {
        "encoding": "inplace",
        "label": "contract ILandCore",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)3128": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_mapping(t_contract(ICoin)2974,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(contract ICoin => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(ICoin)2974,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(ICoin)2974,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(ICoin)2974",
        "label": "mapping(contract ICoin => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressToUintMap)1342_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 1341,
            "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)592_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)2039_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2038,
            "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1845_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)592_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 587,
            "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)2039_storage"
          },
          {
            "astId": 591,
            "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1845_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1840,
            "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1844,
            "contract": "contracts/oracleland/ETHOracleLand.sol:ETHOracleLand",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}